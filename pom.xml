<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>de.alpharogroup</groupId>
		<artifactId>mvn-java-parent</artifactId>
		<version>3.8.0</version>
		<relativePath></relativePath>
	</parent>

	<artifactId>mvn-ui-parent</artifactId>
	<version>1.19.0-SNAPSHOT</version>
	<packaging>pom</packaging>
	<inceptionYear>2016</inceptionYear>

	<name>${project.artifactId}</name>

	<description>
		General parent project for ui java projects.
	</description>

	<url>https://github.com/lightblueseas/mvn-ui-parent</url>

	<properties>
		<!-- JAVAHELP version -->
		<javahelp.version>2.0.05</javahelp.version>
		<!-- SWINGLABS versions -->
		<swing-layout.version>1.0.3</swing-layout.version>
		<jxlayer.version>3.0.4</jxlayer.version>
		<swing-worker.version>1.1</swing-worker.version>
		<swingx.version>1.6.1</swingx.version>
		<!-- SPRING version -->
		<spring.version>4.3.15.RELEASE</spring.version>
		<!-- XML-APIS version -->
		<xml-apis.version>1.4.01</xml-apis.version>
		<!-- EXTENSIONS LIB versions -->
		<file-worker.version>4.19.0</file-worker.version>
		<jcommons-lang.version>4.30.0</jcommons-lang.version>
		<!-- SWING-COMPONENTS version -->
		<swing-components.version>4.26.0</swing-components.version>
		<!-- Plugin Framework for Java (PF4J) version -->
		<pf4j.version>1.3.0</pf4j.version>
		<!-- IZPACK-MAVEN-PLUGIN version -->
		<izpack.version>5.1.2</izpack.version>
		<izpack-panel.version>${izpack.version}</izpack-panel.version>
		<izpack-maven-plugin.version>${izpack.version}</izpack-maven-plugin.version>
		<!-- Installer variables -->
		<staging.dir>${project.build.directory}/staging</staging.dir>
		<izpack.staging>${staging.dir}</izpack.staging>
		<izpack.staging.dir.custom>${izpack.staging}/custom</izpack.staging.dir.custom>
		<izpack.staging.dir.lib>${izpack.staging}/lib</izpack.staging.dir.lib>
		<izpack.installFile>${izpack.dir.app}/install.xml</izpack.installFile>
		<izpack.dir.app>${basedir}/src/main/izpack</izpack.dir.app>
		<staging.dir.app>${staging.dir}/appfiles</staging.dir.app>
		<!-- MAVEN-ANTRUN-PLUGIN variables -->
		<dist-path>${basedir}/dist/bin</dist-path>
		<!-- MAVEN-JAR-PLUGIN variables -->
		<manifestFile-path>src/main/resources/META-INF/MANIFEST.MF</manifestFile-path>
		<maven-shade-plugin.version>3.1.1</maven-shade-plugin.version>
	</properties>

	<developers>

		<developer>
			<id>astrapi69</id>
			<name>Asterios Raptis</name>
			<email>astrapi69 at users.sf.net</email>
			<roles>
				<role>Project manager</role>
				<role>Developer</role>
			</roles>
			<timezone>Berlin</timezone>
		</developer>

	</developers>

	<scm>
		<connection>scm:git:git:@github.com:lightblueseas/mvn-ui-parent.git</connection>
		<developerConnection>scm:git:git@github.com:lightblueseas/mvn-ui-parent.git</developerConnection>
		<url>git:@github.com:lightblueseas/mvn-ui-parent.git</url>
	</scm>

	<issueManagement>
		<system>github</system>
		<url>https://github.com/lightblueseas/mvn-ui-parent/issues</url>
	</issueManagement>

	<ciManagement>
		<system>travis-ci</system>
		<url>https://travis-ci.org/lightblueseas/mvn-ui-parent</url>
	</ciManagement>

	<distributionManagement>
		<repository>
			<id>ossrh</id>
			<name>Nexus Release Repository</name>
			<url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
		</repository>
		<snapshotRepository>
			<id>ossrh</id>
			<name>Sonatype Nexus Snapshots</name>
			<url>https://oss.sonatype.org/content/repositories/snapshots</url>
		</snapshotRepository>
	</distributionManagement>

	<dependencyManagement>

		<dependencies>
			<!-- XML-APIS DEPENDENCIES -->
			<dependency>
				<groupId>xml-apis</groupId>
				<artifactId>xml-apis</artifactId>
				<version>${xml-apis.version}</version>
			</dependency>
			<!-- PF4J PLUGIN DEPENDENCIES -->
			<dependency>
				<groupId>ro.fortsoft.pf4j</groupId>
				<artifactId>pf4j</artifactId>
				<version>${pf4j.version}</version>
			</dependency>
			<!-- IZPACK DEPENDENCIES -->
			<dependency>
				<groupId>org.codehaus.izpack</groupId>
				<artifactId>izpack-panel</artifactId>
				<version>${izpack-panel.version}</version>
			</dependency>
			<!-- JAVAHELP DEPENDENCIES -->
			<dependency>
				<groupId>javax.help</groupId>
				<artifactId>javahelp</artifactId>
				<version>${javahelp.version}</version>
			</dependency>
			<!-- SWINGLABS DEPENDENCIES -->
			<dependency>
				<groupId>org.swinglabs</groupId>
				<artifactId>swing-layout</artifactId>
				<version>${swing-layout.version}</version>
			</dependency>

			<dependency>
				<groupId>org.swinglabs</groupId>
				<artifactId>jxlayer</artifactId>
				<version>${jxlayer.version}</version>
			</dependency>

			<dependency>
				<groupId>org.swinglabs</groupId>
				<artifactId>swing-worker</artifactId>
				<version>${swing-worker.version}</version>
			</dependency>

			<dependency>
				<groupId>org.swinglabs</groupId>
				<artifactId>swingx</artifactId>
				<version>${swingx.version}</version>
			</dependency>
			<!-- EXT-LIBS DEPENDENCIES -->
			<dependency>
				<groupId>de.alpharogroup</groupId>
				<artifactId>swing-components</artifactId>
				<version>${swing-components.version}</version>
			</dependency>

			<dependency>
				<groupId>de.alpharogroup</groupId>
				<artifactId>file-worker</artifactId>
				<version>${file-worker.version}</version>
			</dependency>

			<dependency>
				<groupId>de.alpharogroup</groupId>
				<artifactId>jcommons-lang</artifactId>
				<version>${jcommons-lang.version}</version>
			</dependency>
			<!-- SPRING DEPENDENCIES -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-core</artifactId>
				<version>${spring.version}</version>
			</dependency>

			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-context</artifactId>
				<version>${spring.version}</version>
			</dependency>

			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-context-support</artifactId>
				<version>${spring.version}</version>
			</dependency>

			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-web</artifactId>
				<version>${spring.version}</version>
			</dependency>

		</dependencies>

	</dependencyManagement>

	<dependencies>
		<!-- JAVAHELP DEPENDENCIES -->
		<dependency>
			<groupId>javax.help</groupId>
			<artifactId>javahelp</artifactId>
		</dependency>
		<!-- SWINGLABS DEPENDENCIES -->
		<dependency>
			<groupId>org.swinglabs</groupId>
			<artifactId>swing-layout</artifactId>
		</dependency>

		<dependency>
			<groupId>org.swinglabs</groupId>
			<artifactId>jxlayer</artifactId>
		</dependency>

		<dependency>
			<groupId>org.swinglabs</groupId>
			<artifactId>swing-worker</artifactId>
		</dependency>

		<dependency>
			<groupId>org.swinglabs</groupId>
			<artifactId>swingx</artifactId>
		</dependency>
		<!-- SPRING DEPENDENCIES -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
		</dependency>
		<!-- EXT-LIBS DEPENDENCIES -->
		<dependency>
			<groupId>de.alpharogroup</groupId>
			<artifactId>file-worker</artifactId>
		</dependency>

		<dependency>
			<groupId>de.alpharogroup</groupId>
			<artifactId>jcommons-lang</artifactId>
		</dependency>

		<dependency>
			<groupId>de.alpharogroup</groupId>
			<artifactId>swing-components</artifactId>
		</dependency>

	</dependencies>

	<build>

		<resources>

			<resource>
				<filtering>false</filtering>
				<directory>src/main/izpack</directory>
			</resource>

			<resource>
				<filtering>false</filtering>
				<directory>src/main/resources</directory>
			</resource>

		</resources>

		<pluginManagement>

			<plugins>

				<plugin>
					<artifactId>maven-antrun-plugin</artifactId>
					<executions>
						<execution>
							<id>default-cli</id>
							<phase>process-resources</phase>
							<goals>
								<goal>run</goal>
							</goals>
							<configuration>
								<target>
									<copy todir="${staging.dir}">
										<fileset dir="${izpack.dir.app}" />
									</copy>
								</target>
							</configuration>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<artifactId>maven-dependency-plugin</artifactId>
					<configuration>
						<excludeTransitive>false</excludeTransitive>
						<!-- reference our custom panels jar in our installer descriptor without 
							its version -->
						<stripVersion>true</stripVersion>
						<overWriteReleases>true</overWriteReleases>
						<overWriteSnapshots>true</overWriteSnapshots>
						<overWriteIfNewer>true</overWriteIfNewer>
						<excludeScope>system</excludeScope>
					</configuration>
					<executions>
						<execution>
							<!-- copy *application* jars to izpack staging lib -->
							<id>copy-product-dependencies</id>
							<phase>prepare-package</phase>
							<goals>
								<goal>copy-dependencies</goal>
							</goals>
							<configuration>
								<outputDirectory>${izpack.staging.dir.lib}</outputDirectory>
								<excludeScope>system</excludeScope>
								<!-- this excludes tools.jar, e.g. -->
								<excludeArtifactIds>${project.artifactId}</excludeArtifactIds>
								<!-- IMPORTANT: don't copy custom panels where our application jars 
									live -->
								<excludeGroupIds>org.codehaus.izpack</excludeGroupIds>
								<!-- IMPORTANT: we don't want to copy the IzPack dependency where 
									our application jars live -->
							</configuration>
						</execution>
						<execution>
							<!-- copy izpack custom (custom panels, etc.) jars to izpack staging 
								custom -->
							<id>copy-izpack-dependencies</id>
							<phase>prepare-package</phase>
							<goals>
								<goal>copy-dependencies</goal>
							</goals>
							<configuration>
								<outputDirectory>${izpack.staging.dir.custom}</outputDirectory>
								<includeArtifactIds>${project.artifactId}</includeArtifactIds>
								<!-- IMPORTANT: this causes *only* our custom panels to be copied -->
							</configuration>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<groupId>org.codehaus.izpack</groupId>
					<artifactId>izpack-maven-plugin</artifactId>
					<version>${izpack-maven-plugin.version}</version>
					<extensions>true</extensions>
					<dependencies>

						<dependency>
							<groupId>org.codehaus.izpack</groupId>
							<artifactId>izpack-panel</artifactId>
							<version>${izpack.version}</version>
						</dependency>

						<dependency>
							<groupId>${project.groupId}</groupId>
							<artifactId>${project.artifactId}</artifactId>
							<version>${project.version}</version>
						</dependency>

					</dependencies>
					<executions>
						<execution>
							<phase>package</phase>
							<goals>
								<goal>izpack</goal>
							</goals>
							<configuration>
								<!-- base for relative paths in izpack descriptor -->
								<baseDir>${izpack.staging}</baseDir>
								<installFile>${izpack.installFile}</installFile>
								<outputDirectory>${project.build.directory}</outputDirectory>
								<enableOverrideArtifact>true</enableOverrideArtifact>
								<mkdirs>true</mkdirs>
								<autoIncludeUrl>false</autoIncludeUrl>
								<autoIncludeDevelopers>false</autoIncludeDevelopers>
							</configuration>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<artifactId>maven-jar-plugin</artifactId>
					<configuration>
						<archive>
							<manifest>
								<mainClass>${main-full-app-name}</mainClass>
								<packageName>${main-app-package-name}</packageName>
							</manifest>
							<manifestEntries>
								<mode>development</mode>
								<url>${project.url}</url>
							</manifestEntries>
							<manifestFile>${manifestFile-path}</manifestFile>
						</archive>
					</configuration>
				</plugin>

				<plugin>
					<!-- NOTE: We don't need a groupId specification because the group is 
						org.apache.maven.plugins ...which is assumed by default. -->
					<artifactId>maven-assembly-plugin</artifactId>
					<configuration>
						<descriptorRefs>
							<descriptorRef>jar-with-dependencies</descriptorRef>
						</descriptorRefs>
						<archive>
							<manifest>
								<mainClass>${main-full-app-name}</mainClass>
							</manifest>
						</archive>
					</configuration>
					<executions>
						<execution>
							<id>make-assembly</id>
							<!-- this is used for inheritance merges -->
							<phase>package</phase>
							<!-- append to the packaging phase. -->
							<goals>
								<goal>single</goal>
								<!-- goals == mojos -->
							</goals>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-shade-plugin</artifactId>
					<version>${maven-shade-plugin.version}</version>
					<executions>
						<execution>
							<goals>
								<goal>shade</goal>
							</goals>
							<configuration>
								<transformers>
									<transformer
										implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
										<resource>META-INF/spring.handlers</resource>
									</transformer>
									<transformer
										implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
										<resource>META-INF/spring.schemas</resource>
									</transformer>
								</transformers>
							</configuration>
						</execution>
					</executions>
				</plugin>

			</plugins>

		</pluginManagement>

	</build>

	<profiles>

		<profile>
			<id>prepare-release-resources</id>
			<activation>
				<property>
					<name>performRelease</name>
					<value>true</value>
				</property>
			</activation>

			<build>

				<pluginManagement>

					<plugins>

						<plugin>
							<artifactId>maven-jar-plugin</artifactId>
							<configuration>
								<archive>
									<manifest>
										<mainClass>${main-full-app-name}</mainClass>
										<packageName>${main-app-package-name}</packageName>
									</manifest>
									<manifestEntries>
										<mode>development</mode>
										<url>${project.url}</url>
									</manifestEntries>
									<manifestFile>${manifestFile-path}</manifestFile>
								</archive>
							</configuration>
						</plugin>

						<plugin>
							<!-- NOTE: We don't need a groupId specification because the group 
								is org.apache.maven.plugins ...which is assumed by default. -->
							<artifactId>maven-assembly-plugin</artifactId>
							<configuration>
								<descriptorRefs>
									<descriptorRef>jar-with-dependencies</descriptorRef>
								</descriptorRefs>
								<archive>
									<manifest>
										<mainClass>${main-full-app-name}</mainClass>
									</manifest>
								</archive>
							</configuration>
							<executions>
								<execution>
									<id>make-assembly</id>
									<!-- this is used for inheritance merges -->
									<phase>package</phase>
									<!-- append to the packaging phase. -->
									<goals>
										<goal>single</goal>
										<!-- goals == mojos -->
									</goals>
								</execution>
							</executions>
						</plugin>

					</plugins>

				</pluginManagement>

				<plugins>

					<plugin>
						<artifactId>maven-jar-plugin</artifactId>
					</plugin>

					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
					</plugin>

					<plugin>
						<artifactId>maven-antrun-plugin</artifactId>
					</plugin>

				</plugins>

			</build>

		</profile>

		<profile>
			<id>release-izpack</id>
			<activation>
				<property>
					<name>performRelease</name>
					<value>true</value>
				</property>
			</activation>
			<build>

				<pluginManagement>

					<plugins>

						<plugin>
							<!-- NOTE: We don't need a groupId specification because the group 
								is org.apache.maven.plugins ...which is assumed by default. -->
							<artifactId>maven-assembly-plugin</artifactId>
							<configuration>
								<descriptorRefs>
									<descriptorRef>jar-with-dependencies</descriptorRef>
								</descriptorRefs>
								<archive>
									<manifest>
										<mainClass>${main-full-app-name}</mainClass>
									</manifest>
								</archive>
							</configuration>
							<executions>
								<execution>
									<id>make-assembly</id>
									<!-- this is used for inheritance merges -->
									<phase>package</phase>
									<!-- append to the packaging phase. -->
									<goals>
										<goal>single</goal>
										<!-- goals == mojos -->
									</goals>
								</execution>
							</executions>
						</plugin>

						<plugin>
							<groupId>org.apache.maven.plugins</groupId>
							<artifactId>maven-antrun-plugin</artifactId>
							<executions>
								<execution>
									<id>default-cli</id>
									<phase>process-resources</phase>
									<goals>
										<goal>run</goal>
									</goals>
									<configuration>
										<target>
											<copy todir="${staging.dir}">
												<fileset dir="${izpack.dir.app}" />
											</copy>
										</target>
									</configuration>
								</execution>
							</executions>
						</plugin>

						<plugin>
							<groupId>org.codehaus.izpack</groupId>
							<artifactId>izpack-maven-plugin</artifactId>
							<version>${izpack-maven-plugin.version}</version>
							<extensions>true</extensions>

							<executions>
								<execution>
									<phase>package</phase>
									<goals>
										<goal>izpack</goal>
									</goals>
									<configuration>
										<!-- base for relative paths in izpack descriptor -->
										<baseDir>${izpack.staging}</baseDir>
										<installFile>${izpack.installFile}</installFile>
										<outputDirectory>${project.build.directory}</outputDirectory>
										<enableOverrideArtifact>true</enableOverrideArtifact>
										<mkdirs>true</mkdirs>
										<autoIncludeUrl>false</autoIncludeUrl>
										<autoIncludeDevelopers>false</autoIncludeDevelopers>
									</configuration>
								</execution>
							</executions>
						</plugin>

					</plugins>

				</pluginManagement>

				<plugins>

					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
					</plugin>

					<plugin>
						<artifactId>maven-antrun-plugin</artifactId>
					</plugin>

					<plugin>
						<groupId>org.codehaus.izpack</groupId>
						<artifactId>izpack-maven-plugin</artifactId>
						<version>${izpack-maven-plugin.version}</version>
					</plugin>

				</plugins>

			</build>

		</profile>

		<profile>
			<!-- - - Use this profile to prepare and release the installer. - - When 
				the build is finished the *.jar in the target directory - - is the izpack 
				installer and the *-jar-with-dependencies.jar - - is the executable application. -->
			<id>prepare-and-release-and-izpack</id>
			<activation>
				<property>
					<name>performRelease</name>
					<value>true</value>
				</property>
			</activation>

			<build>

				<pluginManagement>

					<plugins>

						<plugin>
							<artifactId>maven-jar-plugin</artifactId>
							<configuration>
								<archive>
									<manifest>
										<mainClass>${main-full-app-name}</mainClass>
										<packageName>${main-app-package-name}</packageName>
									</manifest>
									<manifestEntries>
										<mode>development</mode>
										<url>${project.url}</url>
									</manifestEntries>
									<manifestFile>${manifestFile-path}</manifestFile>
								</archive>
							</configuration>
						</plugin>

						<plugin>
							<!-- NOTE: We don't need a groupId specification because the group 
								is org.apache.maven.plugins ...which is assumed by default. -->
							<artifactId>maven-assembly-plugin</artifactId>
							<configuration>
								<descriptorRefs>
									<descriptorRef>jar-with-dependencies</descriptorRef>
								</descriptorRefs>
								<archive>
									<manifest>
										<mainClass>${main-full-app-name}</mainClass>
									</manifest>
								</archive>
							</configuration>
							<executions>
								<execution>
									<id>make-assembly</id>
									<!-- this is used for inheritance merges -->
									<phase>package</phase>
									<!-- append to the packaging phase. -->
									<goals>
										<goal>single</goal>
										<!-- goals == mojos -->
									</goals>
								</execution>
							</executions>
						</plugin>

						<plugin>
							<artifactId>maven-antrun-plugin</artifactId>
							<executions>
								<execution>
									<id>create-staging-area</id>
									<phase>process-resources</phase>
									<goals>
										<goal>run</goal>
									</goals>
									<configuration>
										<tasks>
											<copy todir="${izpack.staging}">
												<fileset dir="${basedir}/src/izpack"></fileset>
											</copy>
										</tasks>
									</configuration>
								</execution>
							</executions>
						</plugin>

						<plugin>
							<artifactId>maven-dependency-plugin</artifactId>
							<configuration>
								<excludeTransitive>false</excludeTransitive>
								<!-- reference our custom panels jar in our installer descriptor 
									without its version -->
								<stripVersion>true</stripVersion>
								<overWriteReleases>true</overWriteReleases>
								<overWriteSnapshots>true</overWriteSnapshots>
								<overWriteIfNewer>true</overWriteIfNewer>
								<excludeScope>system</excludeScope>
							</configuration>
							<executions>
								<execution>
									<!-- copy *application* jars to izpack staging lib -->
									<id>copy-product-dependencies</id>
									<phase>prepare-package</phase>
									<goals>
										<goal>copy-dependencies</goal>
									</goals>
									<configuration>
										<outputDirectory>${izpack.staging.dir.lib}</outputDirectory>
										<excludeScope>system</excludeScope>
										<!-- this excludes tools.jar, e.g. -->
										<excludeArtifactIds>${project.artifactId}</excludeArtifactIds>
										<!-- IMPORTANT: don't copy custom panels where our application 
											jars live -->
										<excludeGroupIds>org.codehaus.izpack</excludeGroupIds>
										<!-- IMPORTANT: we don't want to copy the IzPack dependency where 
											our application jars live -->
									</configuration>
								</execution>
								<execution>
									<!-- copy izpack custom (custom panels, etc.) jars to izpack staging 
										custom -->
									<id>copy-izpack-dependencies</id>
									<phase>prepare-package</phase>
									<goals>
										<goal>copy-dependencies</goal>
									</goals>
									<configuration>
										<outputDirectory>${izpack.staging.dir.custom}</outputDirectory>
										<includeArtifactIds>${project.artifactId}</includeArtifactIds>
										<!-- IMPORTANT: this causes *only* our custom panels to be copied -->
									</configuration>
								</execution>
							</executions>
						</plugin>

						<plugin>
							<groupId>org.codehaus.izpack</groupId>
							<artifactId>izpack-maven-plugin</artifactId>
							<version>${izpack-maven-plugin.version}</version>
							<dependencies>

								<dependency>
									<groupId>org.codehaus.izpack</groupId>
									<artifactId>izpack-panel</artifactId>
									<version>${izpack.version}</version>
								</dependency>

								<dependency>
									<groupId>${project.groupId}</groupId>
									<artifactId>${project.artifactId}</artifactId>
									<version>${project.version}</version>
								</dependency>

							</dependencies>
							<executions>
								<execution>
									<phase>package</phase>
									<goals>
										<goal>izpack</goal>
									</goals>
									<configuration>
										<!-- base for relative paths in izpack descriptor -->
										<baseDir>${izpack.staging}</baseDir>
										<installFile>${izpack.installFile}</installFile>
										<output>${file-name-with-dependencies-path}</output>
									</configuration>
								</execution>
							</executions>
						</plugin>

					</plugins>

				</pluginManagement>

				<plugins>

					<plugin>
						<artifactId>maven-jar-plugin</artifactId>
					</plugin>

					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
					</plugin>

					<plugin>
						<artifactId>maven-antrun-plugin</artifactId>
					</plugin>

					<plugin>
						<artifactId>maven-dependency-plugin</artifactId>
					</plugin>

					<plugin>
						<groupId>org.codehaus.izpack</groupId>
						<artifactId>izpack-maven-plugin</artifactId>
						<version>${izpack-maven-plugin.version}</version>
					</plugin>

				</plugins>

			</build>

		</profile>

		<profile>

			<id>prepare-for-release-with-jar-plugin</id>
			<activation>
				<property>
					<name>performRelease</name>
					<value>true</value>
				</property>
			</activation>

			<build>

				<pluginManagement>

					<plugins>

						<plugin>
							<artifactId>maven-dependency-plugin</artifactId>
							<configuration>
								<excludeTransitive>false</excludeTransitive>
								<!-- reference our custom panels jar in our installer descriptor 
									without its version -->
								<stripVersion>true</stripVersion>
								<overWriteReleases>true</overWriteReleases>
								<overWriteSnapshots>true</overWriteSnapshots>
								<overWriteIfNewer>true</overWriteIfNewer>
								<excludeScope>system</excludeScope>
							</configuration>
							<executions>
								<execution>
									<!-- copy *application* jars to izpack staging lib -->
									<id>copy-product-dependencies</id>
									<phase>prepare-package</phase>
									<goals>
										<goal>copy-dependencies</goal>
									</goals>
									<configuration>
										<outputDirectory>${izpack.staging.dir.lib}</outputDirectory>
										<excludeScope>system</excludeScope>
										<!-- this excludes tools.jar, e.g. -->
										<excludeArtifactIds>${project.artifactId}</excludeArtifactIds>
										<!-- IMPORTANT: don't copy custom panels where our application 
											jars live -->
										<excludeGroupIds>org.codehaus.izpack</excludeGroupIds>
										<!-- IMPORTANT: we don't want to copy the IzPack dependency where 
											our application jars live -->
									</configuration>
								</execution>
								<execution>
									<!-- copy izpack custom (custom panels, etc.) jars to izpack staging 
										custom -->
									<id>copy-izpack-dependencies</id>
									<phase>prepare-package</phase>
									<goals>
										<goal>copy-dependencies</goal>
									</goals>
									<configuration>
										<outputDirectory>${izpack.staging.dir.custom}</outputDirectory>
										<includeArtifactIds>${project.artifactId}</includeArtifactIds>
										<!-- IMPORTANT: this causes *only* our custom panels to be copied -->
									</configuration>
								</execution>
							</executions>
						</plugin>

						<plugin>
							<artifactId>maven-jar-plugin</artifactId>
							<configuration>
								<archive>
									<manifest>
										<addClasspath>true</addClasspath>
										<classpathPrefix>staging/</classpathPrefix>
										<mainClass>${main-full-app-name}</mainClass>
										<packageName>${main-app-package-name}</packageName>
									</manifest>
								</archive>
							</configuration>
						</plugin>

					</plugins>

				</pluginManagement>

				<plugins>

					<plugin>
						<artifactId>maven-dependency-plugin</artifactId>
					</plugin>

					<plugin>
						<artifactId>maven-jar-plugin</artifactId>
					</plugin>

				</plugins>

			</build>

		</profile>


		<profile>

			<id>prepare-and-release-with-shade</id>
			<activation>
				<property>
					<name>performRelease</name>
					<value>true</value>
				</property>
			</activation>

			<build>

				<resources>
					<resource>
						<directory>src/main/resources</directory>
						<filtering>false</filtering>
					</resource>
				</resources>

				<pluginManagement>

					<plugins>

						<plugin>
							<groupId>org.apache.maven.plugins</groupId>
							<artifactId>maven-shade-plugin</artifactId>
							<version>${maven-shade-plugin.version}</version>
							<executions>
								<execution>
									<phase>package</phase>
									<goals>
										<goal>shade</goal>
									</goals>
									<configuration>
										<shadedArtifactAttached>true</shadedArtifactAttached>
										<shadedClassifierName>stand-alone</shadedClassifierName>
										<artifactSet>
											<excludes>
												<exclude>org.slf4j:slf4j-api:jar:</exclude>
												<exclude>org.slf4j:slf4j-log4j12:jar:</exclude>
												<exclude>org.slf4j:jcl-over-slf4j:jar:</exclude>
												<exclude>commons-logging:commons-logging:jar:</exclude>
												<exclude>commons-logging:commons-logging-api:jar:</exclude>
											</excludes>
										</artifactSet>
										<filters>
											<filter>
												<artifact>*:*</artifact>
												<excludes>
													<exclude>META-INF/*.SF</exclude>
													<exclude>META-INF/*.DSA</exclude>
													<exclude>META-INF/*.RSA</exclude>
												</excludes>
											</filter>
										</filters>
										<finalName>${full-app-name}</finalName>
										<transformers>
<!-- 											<transformer -->
<!-- 												implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer"> -->
<!-- 												<manifestEntries> -->
<!-- 													<Main-Class>${main-full-app-name}</Main-Class> -->
<!-- 													<X-Compile-Source-JDK>${maven.compile.source}</X-Compile-Source-JDK> -->
<!-- 													<X-Compile-Target-JDK>${maven.compile.target}</X-Compile-Target-JDK> -->
<!-- 												</manifestEntries> -->
<!-- 											</transformer> -->
											<transformer
												implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
												<resource>META-INF/spring.handlers</resource>
											</transformer>
											<transformer
												implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
												<resource>META-INF/spring.schemas</resource>
											</transformer>
										</transformers>
									</configuration>
								</execution>
							</executions>
						</plugin>

					</plugins>

				</pluginManagement>

				<plugins>

					<plugin>
						<artifactId>maven-shade-plugin</artifactId>
					</plugin>

				</plugins>

			</build>

		</profile>

	</profiles>

</project>
